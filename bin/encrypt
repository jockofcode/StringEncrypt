#!/usr/bin/env ruby
#
# encrypt.rb is a program for encrypting an individual file or piped input
# using either a password or rsa key.  If the key is beyond the allowed size
# for the contents being encrypted it is silently symmetrically encrypted 
# with a random password and that random password is instead encrypted with
# the rsa key
#
# USAGE:: encrypt ([-i input/filename] [-o output/filename] [(-k key/filename) || -p password || -p "pass phrase"]) || filename_changed_in_place
#
# -i:: Input file name
# -o:: Output file name
# -k:: RSA public or private key to encrypt with
# -p:: a password or pass phrase to encrypt with
#
# If no input is specified then input is taken from STDIN so a password or key
# must be provided at the time of invocation with the -k or -p options 
# If not then an empty string is used for the password (NOT ADVISABLE)
#
# If no output is specified then the output is directed to STDOUT.  if no
# password or key is provided you will be prompted for a password.
#
# If the input and output file are the same you can optionally pass the 
# filename as the only parameter and then you will be prompted for a password

require 'string-encrypt'
require 'optparse'

options = {}
if ARGV.length == 1 then
	options["outfile"] = options["infile"] = ARGV[0]
else
OptionParser.new do |opts|
	opts.banner = "Usage: encrypt.rb -i input.file -o output.file"
	opts.on("-i", "--infile INPUT", "File to be encrypted") do |input|
		options["infile"] = input.gsub("\"","")
	end

	opts.on("-o", "--outfile OUTPUT", "File after it\'s encrypted") do |output|
		options["outfile"] = output.gsub("\"","")
	end
	opts.on("-p", "--password PASSWORD", "") do |password|
		options["password"] = password
	end
	opts.on("-k", "--key-file KEYFILE", "") do |keyfile|
		options["key"] = keyfile
	end
	opts.on("-z","--zip","") do
		options["zip"] = true
	end
end.parse!
end

password = ""

if options["key"] != nil then
	if options["password"] == nil then password_provided = false end
        begin
                options["password"] = rsa_key(options["key"], options["password"])
        rescue
		if options["infile"] != nil then
	                STDERR.print "What\'s the password?: "
        	        password = STDIN.gets.chomp
               		options["password"] = rsa_key(options["key"],password)
		else
			STDERR.puts "key file may be encrypted, provide the password with -p option\
read the file with -i instead of through a pipe."
			#raise "key file may be encrypted"
			exit(1)
		end
        end
end

if options["infile"] == nil || options["infile"] == "-" then
	f = ARGF
	if options["password"] != nil then 
		password = options["password"]
	end
	#puts "no file, reading from prompt"
else
	f = File.open(options["infile"],"rb") 
	if options["password"] != nil then 
		password = options["password"]
	else
		STDERR.print "What\'s the password?: "
		password = STDIN.gets.chomp
	end
	#puts "opened file #{options["infile"]} for reading"
	#puts.flush
end
	string = f.read
f.close
if string.length == 0 then raise 'can not encrypt nothing'; exit 2 end

encrypted = string.encrypt(password,options["zip"])
# if it fails once, try again
if encrypted == nil then 
	encrypted = string.encrypt(password,options["zip"]) 
end
# if it fails twice, quit with an error
if encrypted == nil then raise 'Could not encrypt successfully'; exit 1 end

if options["outfile"] == nil || options["outfile"] == "-" then 
	print encrypted 
	#puts "no file to output, wrote to screen"
else
	File.open(options["outfile"],"wb") {|f| f << encrypted }
	#puts "opened file #{options["outfile"]} for output"
end
